#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <limits>
using namespace std;

struct RiwayatPinjaman {
    string isbn;
    string judul;
    string tanggal;
    string status; 
};
class Buku {
public:
    string judul;
    string penulis;
    string isbn;
    int jumlahSalinan;
    int salinanTersedia;
    Buku(string j, string p, string i, int js)
        : judul(j), penulis(p), isbn(i), jumlahSalinan(js), salinanTersedia(js) {}
    void tampilkanDetailBuku() const {
        cout << "------------------------------------" << endl;
        cout << "Judul         : " << judul << endl;
        cout << "Penulis       : " << penulis << endl;
        cout << "ISBN          : " << isbn << endl;
        cout << "Salinan Tersedia: " << salinanTersedia << "/" << jumlahSalinan << endl;
        cout << "------------------------------------" << endl;
    }
    bool pinjamBuku() {
        if (salinanTersedia > 0) {
            salinanTersedia--;
            return true;
        }
        return false;
    }
    void kembalikanBuku() {
        if (salinanTersedia < jumlahSalinan) {
            salinanTersedia++;
        }
    }
};
class Anggota {
public:
    string nama;
    string idAnggota;
    vector<Buku*> bukuDipinjam;
    vector<RiwayatPinjaman> riwayatPinjaman;
   Anggota(string n, string id) : nama(n), idAnggota(id) {}
    void tampilkanDetailAnggota() const {
        cout << "------------------------------------" << endl;
        cout << "Nama Anggota  : " << nama << endl;
        cout << "ID Anggota    : " << idAnggota << endl;
        cout << "Buku Dipinjam : " << bukuDipinjam.size() << endl;
        if (!bukuDipinjam.empty()) {
            cout << "  Daftar Buku Dipinjam:" << endl;
            for (const auto* buku : bukuDipinjam) {
                cout << "    - " << buku->judul << " (ISBN: " << buku->isbn << ")" << endl;
            }
        }
        cout << "------------------------------------" << endl;
    }
    void pinjamBuku(Buku* buku) {
        bukuDipinjam.push_back(buku);
    }
    bool kembalikanBuku(const string& isbn_buku) {
        auto it = find_if(bukuDipinjam.begin(), bukuDipinjam.end(),
                          [&](Buku* b) { return b->isbn == isbn_buku; });
        if (it != bukuDipinjam.end()) {
            bukuDipinjam.erase(it);
            return true;
        }
        return false;
    }
    void catatRiwayat(const string& isbn, const string& judul, const string& status) {
        string tanggal = "Hari Ini"; // Sementara, bisa di-upgrade pakai date-time sesungguhnya
        riwayatPinjaman.push_back({isbn, judul, tanggal, status});
    }
    void tampilkanRiwayatPinjaman() const {
        cout << "\n--- Riwayat Pinjaman untuk " << nama << " (ID: " << idAnggota << ") ---" << endl;
        if (riwayatPinjaman.empty()) {
            cout << "  Tidak ada riwayat pinjaman." << endl;
        } else {
            for (const auto& r : riwayatPinjaman) {
                cout << "  - " << r.judul << " (ISBN: " << r.isbn << "), "
                     << r.status << " pada " << r.tanggal << endl;
            }
        }
    }
};
class Perpustakaan {
public:
    vector<Buku> daftarBuku;
    vector<Anggota> daftarAnggota;
    void tambahBuku() {
        string judul, penulis, isbn_buku;
        int jumlahSalinan;
        cout << "\n--- Tambah Buku Baru ---" << endl;
        cout << "Masukkan Judul: ";
        getline(cin >> ws, judul);
        cout << "Masukkan Penulis: ";
        getline(cin >> ws, penulis);
        cout << "Masukkan ISBN: ";
        cin >> isbn_buku;
        if (cariBukuDenganIsbnRef(isbn_buku) != daftarBuku.end()) {
            cout << "Error: Buku dengan ISBN " << isbn_buku << " sudah ada." << endl;
            return;
        }
        cout << "Masukkan Jumlah Salinan: ";
        cin >> jumlahSalinan;
        if (cin.fail() || jumlahSalinan <= 0) {
            cout << "Input jumlah salinan tidak valid." << endl;
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            return;
        }
        daftarBuku.emplace_back(judul, penulis, isbn_buku, jumlahSalinan);
        cout << "Buku '" << judul << "' berhasil ditambahkan." << endl;
    }
    void tambahAnggota() {
        string nama, idAnggota_baru;
        cout << "\n--- Tambah Anggota Baru ---" << endl;
        cout << "Masukkan Nama Anggota: ";
        getline(cin >> ws, nama);
        cout << "Masukkan ID Anggota: ";
        cin >> idAnggota_baru;
        if (cariAnggotaDenganIdRef(idAnggota_baru) != daftarAnggota.end()) {
            cout << "Error: Anggota dengan ID " << idAnggota_baru << " sudah terdaftar." << endl;
            return;
        }
        daftarAnggota.emplace_back(nama, idAnggota_baru);
        cout << "Anggota '" << nama << "' berhasil ditambahkan." << endl;
    }
    void tampilkanSemuaBuku() const {
        cout << "\n--- Daftar Semua Buku ---" << endl;
        if (daftarBuku.empty()) {
            cout << "Belum ada buku yang terdaftar." << endl;
            return;
        }
        for (const auto& buku : daftarBuku) {
            buku.tampilkanDetailBuku();
        }
    }
        void tampilkanSemuaAnggota() const {
        cout << "\n--- Daftar Semua Anggota ---" << endl;
        if (daftarAnggota.empty()) {
            cout << "Belum ada anggota yang terdaftar." << endl;
            return;
        }
        for (const auto& anggota : daftarAnggota) {
            anggota.tampilkanDetailAnggota();
        }
    }
    Buku* cariBukuDenganIsbn(const string& isbn_cari) {
        auto it = find_if(daftarBuku.begin(), daftarBuku.end(),
                          [&](const Buku& b) { return b.isbn == isbn_cari; });
        return (it != daftarBuku.end()) ? &(*it) : nullptr;
    }
    vector<Buku>::iterator cariBukuDenganIsbnRef(const string& isbn_ref) {
        return find_if(daftarBuku.begin(), daftarBuku.end(),
                       [&](const Buku& b) { return b.isbn == isbn_ref; });
    }
    Anggota* cariAnggotaDenganId(const string& idAnggota_cari) {
        auto it = find_if(daftarAnggota.begin(), daftarAnggota.end(),
                          [&](const Anggota& a) { return a.idAnggota == idAnggota_cari; });
        return (it != daftarAnggota.end()) ? &(*it) : nullptr;
    }
    vector<Anggota>::iterator cariAnggotaDenganIdRef(const string& idAnggota_ref) {
        return find_if(daftarAnggota.begin(), daftarAnggota.end(),
                       [&](const Anggota& a) { return a.idAnggota == idAnggota_ref; });
    }
    void prosesPeminjamanBuku() {
        cout << "\n--- Peminjaman Buku ---" << endl;
        string idAnggota_pinjam, isbnBuku_pinjam;
        cout << "Masukkan ID Anggota Peminjam: ";
        cin >> idAnggota_pinjam;
        cout << "Masukkan ISBN Buku yang akan Dipinjam: ";
        cin >> isbnBuku_pinjam;
        Anggota* anggota = cariAnggotaDenganId(idAnggota_pinjam);
        Buku* buku = cariBukuDenganIsbn(isbnBuku_pinjam);
        if (!anggota) {
            cout << "Error: Anggota tidak ditemukan." << endl;
            return;
        }
        if (!buku) {
            cout << "Error: Buku tidak ditemukan." << endl;
            return;
        }
        auto it_pinjam = find_if(anggota->bukuDipinjam.begin(), anggota->bukuDipinjam.end(),
                                 [&](Buku* b_pinjam) { return b_pinjam->isbn == isbnBuku_pinjam; });
        if (it_pinjam != anggota->bukuDipinjam.end()) {
            cout << "Error: Buku sudah dipinjam oleh anggota." << endl;
            return;
        }
        if (buku->pinjamBuku()) {
            anggota->pinjamBuku(buku);
            anggota->catatRiwayat(buku->isbn, buku->judul, "Dipinjam");
            cout << "Buku berhasil dipinjam." << endl;
        } else {
            cout << "Buku tidak tersedia untuk dipinjam." << endl;
        }
    }
    void prosesPengembalianBuku() {
        cout << "\n--- Pengembalian Buku ---" << endl;
        string idAnggota_kembali, isbnBuku_kembali;
        cout << "Masukkan ID Anggota yang Mengembalikan: ";
        cin >> idAnggota_kembali;
        cout << "Masukkan ISBN Buku yang Dikembalikan: ";
        cin >> isbnBuku_kembali;
        Anggota* anggota = cariAnggotaDenganId(idAnggota_kembali);
        Buku* buku = cariBukuDenganIsbn(isbnBuku_kembali);
        if (!anggota) {
            cout << "Error: Anggota tidak ditemukan." << endl;
            return;
        }
        if (!buku) {
            cout << "Error: Buku tidak terdaftar dalam sistem." << endl;
            return;
        }
        if (anggota->kembalikanBuku(isbnBuku_kembali)){
            buku->kembalikanBuku();
            anggota->catatRiwayat(buku->isbn, buku->judul, "Dikembalikan");
            cout <<"Buku berhasil dikembalikan"<<endl;
        }else{
        cout << "Error: Buku ini tidak sedang dipinjam oleh anggota." << endl;
        }
    }

    void jalankanMenu(){
        int pilihan;
        do {
             cout << "===========================================" << endl;
            cout << "====== SISTEM MENEJEMEN PERPUSTAKAAN ======" << endl;
            cout << "=        1. Tambah Buku Baru              =" << endl;
            cout << "=        2. Tambah Anggota Baru           =" << endl;
            cout << "=        3. Tampilkan Semua Buku          =" << endl;
            cout << "=        4. Tampilkan Semua Anggota       =" << endl;
            cout << "=        5. Pinjam Buku                   =" << endl;
            cout << "=        6. Kembalikan Buku               =" << endl;
            cout << "=        7. Cari Buku (ISBN)              =" << endl;
            cout << "=        8. Cari Anggota (ID)             =" << endl;
            cout << "=        9. Riwayat Pinjaman Anggota      =" << endl;
            cout << "=        0. Keluar                        =" << endl;
            cout << "===========================================" << endl;
            cout << "Masukkan pilihan Anda: ";
            cin >> pilihan;
            cin.ignore(numeric_limits<streamsize>::max(), '\n');

            switch (pilihan) {
                case 1: tambahBuku(); break;
                case 2: tambahAnggota(); break;
                case 3: tampilkanSemuaBuku(); break;
                case 4: tampilkanSemuaAnggota(); break;
                case 5: prosesPeminjamanBuku(); break;
                case 6: prosesPengembalianBuku(); break;
                case 7: {
                    string isbnCari;
                    cout << "Masukkan ISBN: ";
                    cin >> isbnCari;
                    Buku* buku = cariBukuDenganIsbn(isbnCari);
                    if (buku) buku->tampilkanDetailBuku();
                    else cout << "Buku tidak ditemukan." << endl;
                    break;
                }
                case 8: {
                    string idCari;
                    cout << "Masukkan ID Anggota: ";
                    cin >> idCari;
                    Anggota* anggota = cariAnggotaDenganId(idCari);
                    if (anggota) anggota->tampilkanDetailAnggota();
                    else cout << "Anggota tidak ditemukan." << endl;
                    break;
                }
                case 9: {
                    string idAnggota;
                    cout << "Masukkan ID Anggota: ";
                    cin >> idAnggota;
                    Anggota* anggota = cariAnggotaDenganId(idAnggota);
                    if (anggota) anggota->tampilkanRiwayatPinjaman();
                    else cout << "Anggota tidak ditemukan." << endl;
                    break;
                }
                case 0:
                    cout << "Terima kasih telah menggunakan sistem." << endl;
                    break;
                default:
                    cout << "Pilihan tidak valid." << endl;
            }
        } while (pilihan != 0);
    }
};

int main() {
    Perpustakaan perpus;
    perpus.jalankanMenu();
    return 0;
}
